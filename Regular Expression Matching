Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Src : https://leetcode.com/problems/regular-expression-matching/

class Solution {
    public boolean isMatch(String s, String p) {
        char[] s1 = s.toCharArray();
        char[] p1 = p.toCharArray();
        
        boolean[][] dp = new boolean[s1.length+1][p1.length+1];
        dp[0][0] = true;
        for(int i=1; i<=p1.length; i++){
          // System.out.println(i);
            if(p1[i-1] == '*'){
                dp[0][i] = dp[0][i-2];
            }
        }
        
        for(int i = 1; i <= s1.length; i++){
            for(int j = 1; j <= p1.length; j++){
                if(s1[i-1] == p1[j-1] || p1[j-1] == '.'){
                    dp[i][j] = dp[i-1][j-1];
                }else if(p1[j-1] == '*'){
                    dp[i][j] = dp[i][j-2];
                    if(s1[i-1] == p1[j-2] || p1[j-2] == '.'){
                        dp[i][j] = dp[i-1][j] || dp[i][j-2];
                    }
                }else{
                    dp[i][j] = false;
                }
            }
        }
        
        for(int i =0; i< dp.length;i++){
            for(int j=0;j<dp[0].length; j++){
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        return dp[s1.length][p1.length];
    }
}

TC : O(mn)
SC : O(mn)
